services:
  db-postgres:
    image: postgres:17.5-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - db-postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: [
      "postgres",
      "-c", "shared_buffers=128MB",
      "-c", "effective_cache_size=512MB", 
      "-c", "work_mem=4MB",
      "-c", "synchronous_commit=off",
      "-c", "autovacuum_naptime=20s",
      "-c", "log_min_duration_statement=2000"
    ]

  rails-api:
    build:
      context: .
      dockerfile: Dockerfile.development
    environment:
      RAILS_ENV: ${RAILS_ENV:-development}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-5}
    depends_on:
      db-postgres:
        condition: service_healthy
    command: bash -lc 'bin/rails db:prepare && bin/rails server -b 0.0.0.0 -p 3000'
    volumes:
      - .:/app
    ports:
      - "3000:3000"

  queue:
    build:
      context: .
      dockerfile: Dockerfile.development
    environment:
      RAILS_ENV: ${RAILS_ENV:-development}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      JOB_CONCURRENCY: ${JOB_CONCURRENCY:-2}
      RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-5}
    depends_on:
      rails-api:
        condition: service_started
    command: bash -lc 'sleep 5 && bin/rails runner "load \"db/queue_schema.rb\"" && bin/rails solid_queue:start'
    volumes:
      - .:/app
    # Escalable:
    # docker compose up --scale queue=3 -d
volumes:
  db-postgres: {}
